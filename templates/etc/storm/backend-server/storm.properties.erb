# The contents of this file was generated by Puppet

# StoRM Backend configuration file
<%-
# storm.service.SURL.endpoint
@srm_endpoints=[]
# storm.service.SURL.default-ports
@srm_ports=[]

scope.lookupvar('storm::backend::srm_pool_members').each do | member |
  @port=member['port'] != nil ? member['port'] : scope.lookupvar('storm::backend::frontend_port')
  @srm_endpoints.push("srm://#{member['hostname']}:#{@port}/srm/managerv2")
  if !@srm_ports.include?(@port)
    @srm_ports.push(@port)
  end
end
-%>

# ============================
# StoRM Service DNS
# ============================
# hostname with which the service is published
storm.service.FE-public.hostname=<%= scope.lookupvar('storm::backend::frontend_public_host') %>

# ============================
# Front End service port
# ============================
# The Front End binding port
storm.service.port=<%= scope.lookupvar('storm::backend::frontend_port') %>

# ============================
# Managed SURL endpoints 
# ============================
#
# comma-separated list of managed SURL. 
# These entries are used to check the SURL validity. 
# storm.service.SURL.endpoint=srm://<surl-host>:<surl-port>/<surl-service-path>
# Example: Example: srm://storm.cnaf.infn.it:8444/srm/managerv2
storm.service.SURL.endpoint=<%= @srm_endpoints.join(',') %>

# ============================
# Managed SURL default ports
# ============================
#
# comma-separated list of managed SURL's defauilt ports. 
# These entries are used to check the SURL validity. 
# storm.service.SURL.default-ports=<surl-port>
# Example: 8444
storm.service.SURL.default-ports=<%= @srm_ports.join(',') %>

# ============================
# FE/BE communication RDBMS
# ============================
#
# Parameters to connect to the DB used as channel for the requests. 
storm.service.db.host=<%= scope.lookupvar('storm::backend::db_hostname') %>
storm.service.db.username=<%= scope.lookupvar('storm::backend::db_username') %>
storm.service.db.password=<%= scope.lookupvar('storm::backend::db_password') %>
storm.service.db.port=<%= scope.lookupvar('storm::backend::db_port') %>
storm.service.db.properties=<%= scope.lookupvar('storm::backend::db_properties') %>
storm.service.db.pool.maxWaitMillis=<%= scope.lookupvar('storm::backend::db_pool_max_wait_millis') %>
storm.service.db.pool.testOnBorrow=<%= scope.lookupvar('storm::backend::db_pool_test_on_borrow') %>
storm.service.db.pool.testWhileIdle=<%= scope.lookupvar('storm::backend::db_pool_test_while_idle') %>
storm.service.db.pool.stormdb.maxTotal=<%= scope.lookupvar('storm::backend::db_pool_stormdb_max_total') %>
storm.service.db.pool.stormdb.minIdle=<%= scope.lookupvar('storm::backend::db_pool_stormdb_min_idle') %>
storm.service.db.pool.stormbeisam.maxTotal=<%= scope.lookupvar('storm::backend::db_pool_stormbeisam_max_total') %>
storm.service.db.pool.stormbeisam.minIdle=<%= scope.lookupvar('storm::backend::db_pool_stormbeisam_min_idle') %>


# ============================
# StoRM Service Generic Behavior
# ============================
directory.automatic-creation=<%= scope.lookupvar('storm::backend::directory_automatic_creation') %>
# To enable file creation within directories. Useful when authorization is not defined.
directory.writeperm=<%= scope.lookupvar('storm::backend::directory_writeperm') %>


# ============================
# StoRM Service PINNED Behavior
# ============================
# Default PinLifetime in seconds used for pinning files in case of srmPrepareToPut or srmPrapareToGet operation
# without any pinLifetime specified. 
pinLifetime.default=<%= scope.lookupvar('storm::backend::pinlifetime_default') %>
# Maximum allowed value for Pin LifeTime. 
# Values beyond the max will be dropped to max value.
pinLifetime.maximum=<%= scope.lookupvar('storm::backend::pinlifetime_maximum') %>


# ============================
# StoRM Service TURL Behavior
# ============================
extraslashes.file=<%= scope.lookupvar('storm::backend::extraslashes_file') %>
# extraslashes.rfio=
extraslashes.gsiftp=<%= scope.lookupvar('storm::backend::extraslashes_gsiftp') %>
extraslashes.root=<%= scope.lookupvar('storm::backend::extraslashes_root') %>


# =======================
# Default 
# =======================
# Default FileLifetime in seconds used for VOLATILE file in case of SRM request without FileLifetime parameter specified.
fileLifetime.default=259200
# Possible values are :   N (Never) and  A (Always)
default.overwrite=A
# Possible values are  V (Volatile), P (Permanent) and  D (Durable)      
default.storagetype=P


# ============================
# ASYNCH SCHEDULER Component parameters
# ============================
scheduler.crusher.workerCorePoolSize=<%= scope.lookupvar('storm::backend::requests_scheduler_core_size') %>
scheduler.crusher.workerMaxPoolSize=<%= scope.lookupvar('storm::backend::requests_scheduler_max_size')  %>
scheduler.crusher.queueSize=<%= scope.lookupvar('storm::backend::requests_scheduler_queue_size')  %>
scheduler.chunksched.ptp.workerCorePoolSize=<%= scope.lookupvar('storm::backend::ptp_requests_scheduler_core_size')  %>
scheduler.chunksched.ptp.workerMaxPoolSize=<%= scope.lookupvar('storm::backend::ptp_requests_scheduler_max_size')  %>
scheduler.chunksched.ptp.queueSize=<%= scope.lookupvar('storm::backend::ptp_requests_scheduler_queue_size')  %>
scheduler.chunksched.ptg.workerCorePoolSize=<%= scope.lookupvar('storm::backend::ptg_requests_scheduler_core_size')  %>
scheduler.chunksched.ptg.workerMaxPoolSize=<%= scope.lookupvar('storm::backend::ptg_requests_scheduler_max_size')  %>
scheduler.chunksched.ptg.queueSize=<%= scope.lookupvar('storm::backend::ptg_requests_scheduler_queue_size')  %>
scheduler.chunksched.bol.workerCorePoolSize=<%= scope.lookupvar('storm::backend::bol_requests_scheduler_core_size')  %>
scheduler.chunksched.bol.workerMaxPoolSize=<%= scope.lookupvar('storm::backend::bol_requests_scheduler_max_size')  %>
scheduler.chunksched.bol.queueSize=<%= scope.lookupvar('storm::backend::bol_requests_scheduler_queue_size')  %>


# ============================
# ASYNCH PICKER Component parameters
# ============================
asynch.db.ReconnectPeriod=<%= scope.lookupvar('storm::backend::asynch_db_reconnect_period')  %>
asynch.db.DelayPeriod=<%= scope.lookupvar('storm::backend::asynch_db_delay_period')  %>
asynch.PickingInitialDelay=<%= scope.lookupvar('storm::backend::asynch_picking_initial_delay')  %>
# Polling time in seconds for pick up new requests from DB
asynch.PickingTimeInterval=<%= scope.lookupvar('storm::backend::asynch_picking_time_interval')  %>
asynch.PickingMaxBatchSize=<%= scope.lookupvar('storm::backend::asynch_picking_max_batch_size')  %>


# ======================================
# SYNCH CALL Component tuning parameters
# ======================================
synchcall.directoryManager.maxLsEntry=<%= scope.lookupvar('storm::backend::max_ls_entries')  %>


# ============================
# REST Services parameter
# ============================
storm.rest.services.port=<%= scope.lookupvar('storm::backend::rest_services_port')  %>
storm.rest.services.maxthreads=<%= scope.lookupvar('storm::backend::rest_services_max_threads')  %>
storm.rest.services.max_queue_size=<%= scope.lookupvar('storm::backend::rest_services_max_queue_size')  %>


# ============================
# XMLRPC Server parameter
# ============================
synchcall.xmlrpc.unsecureServerPort=<%= scope.lookupvar('storm::backend::xmlrpc_unsecure_server_port')  %>
synchcall.xmlrpc.maxthread=<%= scope.lookupvar('storm::backend::xmlrpc_maxthread')  %>
synchcall.xmlrpc.max_queue_size=<%= scope.lookupvar('storm::backend::xmlrpc_max_queue_size')  %>
synchcall.xmlrpc.security.enabled=<%= scope.lookupvar('storm::backend::xmlrpc_security_enabled')  %>
synchcall.xmlrpc.security.token=<%= scope.lookupvar('storm::backend::xmlrpc_security_token')  %>


# =======================
# Pinned Files cleaning parameters
# =======================
# Initial delay in seconds before starting the garbage collector thread. Default: 10.
gc.pinnedfiles.cleaning.delay=<%= scope.lookupvar('storm::backend::gc_pinnedfiles_cleaning_delay')  %>
# Garbage Collector time interval in seconds. Default: 300.
gc.pinnedfiles.cleaning.interval=<%= scope.lookupvar('storm::backend::gc_pinnedfiles_cleaning_interval')  %>


# ===============================
# TAPE RECALL Component parameter
# ===============================
tape.recalltable.service.param.retry-value=retry-value
tape.recalltable.service.param.status=status
tape.recalltable.service.param.takeover=first


# ===========================
# Garbage Collector parameter
# ===========================
#
# Enable/Disable Garbage Collector
purging=<%= scope.lookupvar('storm::backend::gc_purge_enabled')  %>
#
# Time interval for between two requests in garbage collection. In seconds
purge.interval=<%= scope.lookupvar('storm::backend::gc_purge_interval')  %>
#
# Number of requests removed at each run. Every run purge max 800 requests in final status 
purge.size=<%= scope.lookupvar('storm::backend::gc_purge_size')  %>
#
# Time after that the GC consider a _terminated_ request as garbage
# Default: 21600s (6h)
expired.request.time=<%= scope.lookupvar('storm::backend::gc_expired_request_time')  %>
#
# Time after that the GC consider an _in-progress_ bol request as garbage
# Default: 2592000 (1 month)
expired.inprogress.bol.time=<%= scope.lookupvar('storm::backend::gc_expired_inprogress_bol_time')  %>
#
# Time after that the GC consider an _in-progress_ ptp request as garbage
# Default: 2592000 (1 month)
expired.inprogress.ptp.time=<%= scope.lookupvar('storm::backend::gc_expired_inprogress_ptp_time')  %>


# ==========================================================
# Expired-Put-Requests-Agent parameters
# ==========================================================
#
# Transit expired put requests to a final state. A put request is expired if pinLifetime is reached.
# See pinLifetime.default.
#
#Time interval between two agent executions. In seconds
transit.interval=<%= scope.lookupvar('storm::backend::gc_ptp_transit_interval')  %>
#
#Delay on starting agent. In seconds
transit.delay=<%= scope.lookupvar('storm::backend::gc_ptp_transit_start_delay')  %>


# Skip ACL setup for PtG requests
ptg.skip-acl-setup=<%= scope.lookupvar('storm::backend::ptg_skip_acl_setup')  %>

# The caching policy for successful name lookups from the name service.
# The value is specified as integer to indicate the number of seconds to cache the successful lookup.
# A value of -1 indicates "cache forever". The default behavior is to cache forever when a security
# manager is installed, and to cache for an implementation specific period of time, when a security
# manager is not installed.
#
# Default value: 0
#
#networkaddress.cache.ttl=0

# The caching policy for un-successful name lookups from the name service.
# The value is specified as integer to indicate the number of seconds to cache the failure for un-successful lookups.
# A value of 0 indicates "never cache". A value of -1 indicates "cache forever".
#
# Default value: 0
#
#networkaddress.cache.negative.ttl=0

# Enable/disable sanity checks
sanity-check.enabled=<%= scope.lookupvar('storm::backend::sanity_check_enabled')  %>

# DiskUsage Agent
storm.service.du.enabled=<%= scope.lookupvar('storm::backend::service_du_enabled')  %>
storm.service.du.delay=<%= scope.lookupvar('storm::backend::service_du_delay')  %>
storm.service.du.interval=<%= scope.lookupvar('storm::backend::service_du_interval')  %>

# HTTP TURL prefix
http.turl_prefix=<%= scope.lookupvar('storm::backend::http_turl_prefix')  %>