<%-

@i = 0;
@num_sas = scope.lookupvar('storm::backend::storage_areas').length()
@storage_areas = Array.new(@num_sas) { Hash.new }
scope.lookupvar('storm::backend::storage_areas').each do | sa |
  
  # name, root_path, online_size, accesspoints, vos are mandatory
  #
  @storage_areas[@i]['sa_upp'] = sa['name'].upcase.gsub("-", "").gsub(".","").gsub("_","")
  @storage_areas[@i]['sa_low'] = sa['name'].downcase
  @storage_areas[@i]['root'] = sa['root_path']

  @storage_areas[@i]['accesspoints'] = sa['access_points']
  if @storage_areas[@i]['accesspoints'] == nil
    @storage_areas[@i]['accesspoints'] = [ "/#{sa['name']}" ]
  end
  @storage_areas[@i]['vos'] = sa['vos']
  if @storage_areas[@i]['vos'] == nil
    @storage_areas[@i]['vos'] = [ "#{sa['name']}" ]
  end

  # dn_regex
  @storage_areas[@i]['dn_regex'] = sa['dn_regex']
  if @storage_areas[@i]['dn_regex'] == nil
    @storage_areas[@i]['dn_regex']="*"
  end
  # fs
  if sa['fs_type']
    @storage_areas[@i]['fs'] = sa['fs_type']
  elsif scope.lookupvar('storm::backend::fs_type')
    @storage_areas[@i]['fs'] = scope.lookupvar('storm::backend::fs_type')
  else
    @storage_areas[@i]['fs'] = 'posixfs'
  end
  # fs_type and fs_driver
  case @storage_areas[@i]['fs']
    when 'gpfs'
      @storage_areas[@i]['fs_type'] = 'gpfs'
      @storage_areas[@i]['fs_driver'] = 'gpfs'
    when 'test'
      @storage_areas[@i]['fs_type'] = 'ext3'
      @storage_areas[@i]['fs_driver'] = 'test'
    else
      @storage_areas[@i]['fs_type'] = 'ext3'
      @storage_areas[@i]['fs_driver'] = 'posixfs'
  end
  # fs_space_token
  @storage_areas[@i]['fs_space_token'] = sa['space_token'] ? sa['space_token'] : "#{@storage_areas[@i]['sa_upp']}_TOKEN"
  # authz
  @storage_areas[@i]['authz'] = sa['authz'] ? sa['authz'] : "permit-all"
  # online_size
  @storage_areas[@i]['online_size'] = sa['online_size']
  if !@storage_areas[@i]['online_size']
    fail("missing online size for #{@storage_areas[@i]['sa_low']}")
  end
  # storage_class
  @storage_areas[@i]['storage_class'] = sa['storage_class'] ? sa['storage_class'] : "T0D1"
  case @storage_areas[@i]['storage_class']
    when 'T0D1'
      @storage_areas[@i]['retention_policy'] = "replica"
      @storage_areas[@i]['access_latency'] = "online"
      @storage_areas[@i]['nearline_size'] = 0
    when 'T1D0'
      @storage_areas[@i]['retention_policy'] = "custodial"
      @storage_areas[@i]['access_latency'] = "nearline"
      @storage_areas[@i]['nearline_size'] = sa['nearline_size']
      if !@storage_areas[@i]['nearline_size']
        fail("missing nearline size for #{@storage_areas[@i]['sa_low']}")
      end
    when 'T1D1'
      @storage_areas[@i]['retention_policy'] = "custodial"
      @storage_areas[@i]['access_latency'] = "online"
      @storage_areas[@i]['nearline_size'] = sa['nearline_size']
      if !@storage_areas[@i]['nearline_size']
        fail("missing nearline size for #{@storage_areas[@i]['sa_low']}")
      end
    else
      fail("invalid storage class for #{@storage_areas[@i]['sa_low']}: #{@storage_areas[@i]['storage_class']}")
  end
  # acl_mode
  @storage_areas[@i]['acl_mode'] = sa['acl_mode'] ? sa['acl_mode'] : "AoT"
  # default_acl_list
  @storage_areas[@i]['default_acl_list'] = sa['default_acl_list']
  # quota
  @storage_areas[@i]['quota'] = sa['quota']
  # transfer_protocols
  if sa['transfer_protocols']
    @storage_areas[@i]['transfer_protocols'] = sa['transfer_protocols']
  elsif scope.lookupvar('storm::backend::transfer_protocols')
    @storage_areas[@i]['transfer_protocols'] = scope.lookupvar('storm::backend::transfer_protocols')
  else
    @storage_areas[@i]['transfer_protocols'] = ['file', 'gsiftp']
  end
  # gsiftp_pool_members
  if sa['gsiftp_pool_members']
    @storage_areas[@i]['gsiftp_members'] = sa['gsiftp_pool_members']
  elsif scope.lookupvar('storm::backend::gsiftp_pool_members')
    @storage_areas[@i]['gsiftp_members'] = scope.lookupvar('storm::backend::gsiftp_pool_members')
  else
    @storage_areas[@i]['gsiftp_members'] = []
  end
  # xroot_hostname and xroot_port
  @storage_areas[@i]['xroot_hostname'] = sa['xroot_hostname']
  if @storage_areas[@i]['xroot_hostname'] == nil and scope.lookupvar('storm::backend::xroot_hostname') != nil
    @storage_areas[@i]['xroot_hostname'] = scope.lookupvar('storm::backend::xroot_hostname')
  end
  @storage_areas[@i]['xroot_port'] = sa['xroot_port']
  if @storage_areas[@i]['xroot_port'] == nil and scope.lookupvar('storm::backend::xroot_port') != nil
    @storage_areas[@i]['xroot_port'] = scope.lookupvar('storm::backend::xroot_port')
  end
  # webdav_pool_members
  if sa['webdav_pool_members']
    @storage_areas[@i]['webdav_members'] = sa['webdav_pool_members']
  elsif scope.lookupvar('storm::backend::webdav_pool_members')
    @storage_areas[@i]['webdav_members'] = scope.lookupvar('storm::backend::webdav_pool_members')
  else
    @storage_areas[@i]['webdav_members'] = []
  end
  # gsiftp_balance_strategy
  @storage_areas[@i]['gsiftp_balance_strategy'] = sa['gsiftp_pool_balance_strategy']
  if @storage_areas[@i]['gsiftp_balance_strategy'] == nil
    @storage_areas[@i]['gsiftp_balance_strategy'] = scope.lookupvar('storm::backend::gsiftp_pool_balance_strategy')
    if @storage_areas[@i]['gsiftp_balance_strategy'] == nil
      @storage_areas[@i]['gsiftp_balance_strategy'] = 'round-robin'
    end
  end
  # anonymous_http_read
  @storage_areas[@i]['anonymous_http_read'] = sa['anonymous_http_read'].nil? ? false : sa['anonymous_http_read']

  @i += 1
end
-%>
<namespace xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="namespace-1.5.0.xsd" version="1.5.0">
  <filesystems>
<%- @storage_areas.each do | s | -%>
    <filesystem name="<%= s['sa_upp'] %>-FS" fs_type="<%= s['fs_type'] %>">
      <space-token-description><%= s['fs_space_token'] %></space-token-description>
      <storage-class><%= s['storage_class'] %></storage-class>
      <root><%= s['root'] %></root>
      <filesystem-driver>it.grid.storm.filesystem.swig.<%= s['fs_driver'] %></filesystem-driver>
      <spacesystem-driver>it.grid.storm.filesystem.MockSpaceSystem</spacesystem-driver>
      <storage-area-authz>
        <%- if s['authz'] == "permit-all" ||  s['authz'] == "deny-all" -%>
        <fixed><%= s['authz'] %></fixed>
        <%- else -%>
        <authz-db><%= s['authz'] %></authz-db>
        <%- end -%>
      </storage-area-authz>
      <properties>
        <RetentionPolicy><%= s['retention_policy'] %></RetentionPolicy>
        <AccessLatency><%= s['access_latency'] %></AccessLatency>
        <ExpirationMode>neverExpire</ExpirationMode>
        <TotalOnlineSize unit="Byte" limited-size="true"><%= s['online_size'].to_i*1000*1000*1000 %></TotalOnlineSize>
        <TotalNearlineSize unit="Byte"><%= s['nearline_size'].to_i*1000*1000*1000 %></TotalNearlineSize>
      </properties>
      <capabilities>
        <aclMode><%= s['acl_mode'] %></aclMode>
        <%- if s['default_acl_list'] != nil && s['default_acl_list'].length > 0 -%>
        <default-acl>
          <%- s['default_acl_list'].each do | acl | -%>
          <acl-entry>
            <groupName><%= acl['group'] %></groupName>
            <permissions><%= acl['permission'] %></permissions>
          </acl-entry>
          <%- end -%>
        </default-acl>
        <%- end -%>
        <%- if s['fs_driver'] == 'gpfs' && s['quota'] != nil -%>
        <quota enabled="true">
          <%- @sa_quota_device = sa['quota']['device'] -%>
          <%- if @sa_quota_device == nil -%>
            <%= fail("missing quota device value for #{s['sa_low']}") %>
          <%- end -%>
          <device><%= @sa_quota_device %></device>
          <quotaElement>
            <%- @sa_quota_type = sa['quota']['type'] -%>
            <%- @sa_quota_value = sa['quota']['value'] -%>
            <%- if @sa_quota_type == "username" -%>
            <userName><%= @sa_quota_value %></userName>
            <%- elsif @sa_quota_type == "group" -%>
            <groupName><%= @sa_quota_value %></groupName>
            <%- else -%>
            <filesetName><%= @sa_quota_value %></filesetName>
            <%- end -%>
          </quotaElement>
        </quota>
        <%- end -%>
        <trans-prot>
          <%- @protocol_id=0 -%>
          <%- if Array(s['transfer_protocols']).include?('file') -%>
          <prot name="file">
            <schema>file</schema>
          </prot>
          <%- end -%>
          <%- if Array(s['transfer_protocols']).include?('gsiftp') -%>
            <%- if Array(s['gsiftp_members']) == nil or Array(s['gsiftp_members']).empty? -%>
              <%= fail("gsiftp transfer protocol is enabled for #{s['sa_low']} but no gsiftp_pool_members is defined for storage area or globally") %>
            <%- end -%>
            <%- @ids_gftp=[] -%>
            <%- Array(s['gsiftp_members']).each do | g | -%>
          <prot name="gsiftp">
            <id><%= @protocol_id %></id>
            <schema>gsiftp</schema>
            <host><%= g['hostname'] %></host>
            <port><%- if g['port'] != nil -%><%= g['port'] %><%- else -%>2811<%- end -%></port>
          </prot>
              <%- @ids_gftp.push(@protocol_id) -%>
              <%- @protocol_id+=1 -%>
            <%- end -%>
          <%- end -%>
          <%- if Array(s['transfer_protocols']).include?('xroot') -%>
            <%- if s['xroot_hostname'] == nil -%>
              <%= fail("xroot transfer protocol is enabled for #{s['sa_low']} but no xroot_hostname is defined for storage area or globally") %>
            <%- end -%>
            <%- if s['xroot_port'] == nil -%>
              <%= fail("xroot transfer protocol is enabled for #{s['sa_low']} but no xroot_port is defined for storage area or globally") %>
            <%- end -%>
          <prot name="root">
            <schema>root</schema>
            <host><%= s['xroot_hostname'] %></host>
            <port><%= s['xroot_port'] %></port>
          </prot>
          <prot name="xroot">
            <id><%= @protocol_id %></id>
            <schema>xroot</schema>
            <host><%= s['xroot_hostname'] %></host>
            <port><%= s['xroot_port'] %></port>
          </prot>
            <%- @protocol_id+=1 -%>
          <%- end -%>
          <%- if Array(s['transfer_protocols']).include?('webdav') -%>
            <%- if Array(s['webdav_members']) == nil -%>
              <%= fail("https transfer protocol is enabled for #{s['sa_low']} but no webdav_pool_members is defined for storage area or globally") %>
            <%- end -%>
            <%- Array(s['webdav_members']).each do | member | -%>
          <prot name="https">
            <id><%= @protocol_id %></id>
            <schema>https</schema>
            <host><%= member['hostname'] %></host>
            <%- if member['https_port'] != nil -%>
            <port><%= member['https_port'] %></port>
            <%- else -%>
            <port>8443</port>
            <%- end -%>
          </prot>
              <%- @protocol_id+=1 -%>
          <prot name="http">
            <id><%= @protocol_id %></id>
            <schema>http</schema>
            <host><%= member['hostname'] %></host>
            <%- if member['http_port'] != nil -%>
            <port><%= member['http_port'] %></port>
            <%- else -%>
            <port>8085</port>
            <%- end -%>
          </prot>
              <%- @protocol_id+=1 -%>
            <%- end -%>
          <%- end -%>
        </trans-prot>
        <pool>
          <balance-strategy><%= s['gsiftp_balance_strategy'] %></balance-strategy>
          <members>
            <%- Array(s['gsiftp_members']).each_with_index do | member, i | -%>
            <%- @id=@ids_gftp[i] -%>
            <member member-id="<%= @id %>">
              <%- if s['gsiftp_balance_strategy'] == "weight" -%>
                <%- @weight=member['weight'].nil? ? 100 : member['weight'] -%>
                <weight><%= @weight %></weight>
              <%- end -%>
            </member>
            <%- end -%>
          </members>
        </pool>
      </capabilities>
    </filesystem>
<%- end -%>
  </filesystems>
  <mapping-rules>
<%-
  @storage_areas.each do | s |
    @counter=0
    Array(s['accesspoints']).each do | ap |
      @maprule_name="#{s['sa_low']}-maprule-#{@counter}"
-%>
    <map-rule name="<%= @maprule_name %>">
      <stfn-root><%= ap %></stfn-root>
      <mapped-fs><%= s['sa_upp'] %>-FS</mapped-fs>
    </map-rule>
<%-
      @counter+=1
    end
  end
-%>
  </mapping-rules>
  <approachable-rules>
<%-
  @storage_areas.each do | s |
    @counter=0
    if Array(s['vos']).length == 0
      @apprule_name="#{s['sa_low']}-rule-#{@counter}"
-%>
    <app-rule name="<%= @apprule_name %>">
      <subjects>
        <dn><%= s['dn_regex'] %></dn>
        <vo-name>*</vo-name>
      </subjects>
      <approachable-fs><%= s['sa_upp'] %>-FS</approachable-fs>
      <anonymous-http-read><%= s['anonymous_http_read'] %></anonymous-http-read>
    </app-rule>
<%-
    else
      Array(s['vos']).each do | vo |
        @apprule_name="#{s['sa_low']}-rule-#{@counter}"
-%>
    <app-rule name="<%= @apprule_name %>">
      <subjects>
        <dn><%= s['dn_regex'] %></dn>
        <vo-name><%= vo %></vo-name>
      </subjects>
      <approachable-fs><%= s['sa_upp'] %>-FS</approachable-fs>
      <anonymous-http-read><%= s['anonymous_http_read'] %></anonymous-http-read>
    </app-rule>
<%-
        @counter+=1
      end
    end
  end
-%>
  </approachable-rules>
</namespace>