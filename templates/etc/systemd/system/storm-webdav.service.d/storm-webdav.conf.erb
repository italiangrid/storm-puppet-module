[Service]
# Storm webdav service will run as this user
# Default: storm
Environment="STORM_WEBDAV_USER=<%=scope.lookupvar('storm::webdav::user')%>"

# JVM options
<%- if scope.lookupvar('storm::webdav::debug') -%>
# To have the JVM debug agent bind on all interfaces use `...,address=*:1044,suspend=n`, otherwise the agent binds only on
# localhost
Environment="STORM_WEBDAV_JVM_OPTS=<%=scope.lookupvar('storm::webdav::jvm_opts')%> -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=<%=scope.lookupvar('storm::webdav::debug_port')%>,<%- if scope.lookupvar('storm::webdav::debug_suspend') -%>suspend=y<%- else -%>suspend=n<%- end -%>"
<%- else -%>
Environment="STORM_WEBDAV_JVM_OPTS=<%=scope.lookupvar('storm::webdav::jvm_opts')%>"
<%- end -%>

# StoRM webdav will bind on this address
Environment="STORM_WEBDAV_SERVER_ADDRESS=0.0.0.0"

# In order to handle tpc requests, webdav needs to know for which hostnames
# is handling requests (and possibly any alias)
# STORM_WEBDAV_HOSTNAME_0="localhost"
# STORM_WEBDAV_HOSTNAME_1="alias.for.localhost"
<%- scope.lookupvar('storm::webdav::hostnames').each_with_index do | hostname, idx | -%>
Environment="STORM_WEBDAV_HOSTNAME_<%= idx %>=<%= hostname %>"
<%- end -%>

# HTTPS connector port
Environment="STORM_WEBDAV_HTTPS_PORT=<%=scope.lookupvar('storm::webdav::https_port')%>"

# HTTP connector port
Environment="STORM_WEBDAV_HTTP_PORT=<%=scope.lookupvar('storm::webdav::http_port')%>"

# Path to the service certificate.
Environment="STORM_WEBDAV_CERTIFICATE_PATH=/etc/grid-security/storm-webdav/hostcert.pem"

# Path to the service certificate private key.
Environment="STORM_WEBDAV_PRIVATE_KEY_PATH=/etc/grid-security/storm-webdav/hostkey.pem"

# Trust anchors directory
Environment="STORM_WEBDAV_TRUST_ANCHORS_DIR=/etc/grid-security/certificates"

# How often (seconds) trust anchors are refreshed from the trust anchors directory
Environment="STORM_WEBDAV_TRUST_ANCHORS_REFRESH_INTERVAL=<%=scope.lookupvar('storm::webdav::trust_anchors_refresh_interval')%>"

# Max concurrent connections
Environment="STORM_WEBDAV_MAX_CONNECTIONS=<%=scope.lookupvar('storm::webdav::max_concurrent_connections')%>"

# Connection queue size
Environment="STORM_WEBDAV_MAX_QUEUE_SIZE=<%=scope.lookupvar('storm::webdav::max_queue_size')%>"

# Connector Maximum idle time (in milliseconds)
Environment="STORM_WEBDAV_CONNECTOR_MAX_IDLE_TIME=<%=scope.lookupvar('storm::webdav::connector_max_idle_time')%>"

# Storage area configuration directory
Environment="STORM_WEBDAV_SA_CONFIG_DIR=/etc/storm/webdav/sa.d"

# The webdav server jar. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_JAR=/usr/share/java/storm-webdav/storm-webdav-server.jar"

# The StoRM webdav logfile. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_LOG=/var/log/storm/webdav/storm-webdav-server.log"

# The StoRM webdav stdout logfile. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_OUT=/var/log/storm/webdav/storm-webdav-server.out"

# The StoRM webdav stderr logfile. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_ERR=/var/log/storm/webdav/storm-webdav-server.err"

# The StoRM webdav logging configuration. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_LOG_CONFIGURATION=/etc/storm/webdav/logback.xml"

# The StoRM webdav access log configuration. Do not change this unless you know what you are doing.
Environment="STORM_WEBDAV_ACCESS_LOG_CONFIGURATION=/etc/storm/webdav/logback-access.xml"

# Enables/disables  support for VO map files
Environment="STORM_WEBDAV_VO_MAP_FILES_ENABLE=<%=scope.lookupvar('storm::webdav::vo_map_files_enable')%>"

# Where StoRM WebDAV should look for voms map files.
Environment="STORM_WEBDAV_VO_MAP_FILES_CONFIG_DIR=<%=scope.lookupvar('storm::webdav::vo_map_files_config_dir')%>"

# VOMS map files refresh period (in seconds)
Environment="STORM_WEBDAV_VO_MAP_FILES_REFRESH_INTERVAL=<%=scope.lookupvar('storm::webdav::vo_map_files_refresh_interval')%>"

# Max number of active third party copy connections
Environment="STORM_WEBDAV_TPC_MAX_CONNECTIONS=<%=scope.lookupvar('storm::webdav::tpc_max_connections')%>"

# Max number of active third party copy connections per route
Environment="STORM_WEBDAV_TPC_MAX_CONNECTIONS_PER_ROUTE=<%=scope.lookupvar('storm::webdav::tpc_max_connections_per_route')%>"

# Third-party-copy TLS protocol
Environment="STORM_WEBDAV_TPC_TLS_PROTOCOL=<%=scope.lookupvar('storm::webdav::tpc_tls_protocol')%>"

# Proactively verify checksums in third-party-copy
Environment="STORM_WEBDAV_TPC_VERIFY_CHECKSUM=<%=scope.lookupvar('storm::webdav::tpc_verify_checksum')%>"
# Connection timeout in seconds
Environment="STORM_WEBDAV_TPC_TIMEOUT_IN_SECS=<%=scope.lookupvar('storm::webdav::tpc_timeout_in_secs')%>"
Environment="STORM_WEBDAV_TPC_REPORT_DELAY_SECS=<%=scope.lookupvar('storm::webdav::tpc_report_delay_secs')%>"
Environment="STORM_WEBDAV_TPC_ENABLE_TLS_CLIENT_AUTH=<%=scope.lookupvar('storm::webdav::tpc_enable_tls_client_auth')%>"
Environment="STORM_WEBDAV_TPC_PROGRESS_REPORT_THREAD_POOL_SIZE=<%=scope.lookupvar('storm::webdav::tpc_progress_report_thread_pool_size')%>"
# File size needed to add to the TPC request the header "Expect: 100-Continue"
Environment="STORM_WEBDAV_TPC_ENABLE_EXPECT_CONTINUE_THRESHOLD=<%=scope.lookupvar('storm::webdav::tpc_enable_expect_continue_threshold')%>"

# Enables the OAuth authorization server, used to issue bearer tokens
# to clients presenting a VOMS credential
Environment="STORM_WEBDAV_AUTHZ_SERVER_ENABLE=<%=scope.lookupvar('storm::webdav::authz_server_enable')%>"

<%- if scope.lookupvar('storm::webdav::authz_server_enable') -%>
# The issuer setting for the token
# Default: https://${STORM_WEBDAV_HOSTNAME_0}:${STORM_WEBDAV_HTTPS_PORT}
Environment="STORM_WEBDAV_AUTHZ_SERVER_ISSUER=<%=scope.lookupvar('storm::webdav::authz_server_issuer')%>"

# Maximum token lifetime in seconds
Environment="STORM_WEBDAV_AUTHZ_SERVER_MAX_TOKEN_LIFETIME_SEC=<%=scope.lookupvar('storm::webdav::authz_server_max_token_lifetime_sec')%>"

# The WebDAV authz server secret
# This secret is used to sign bearer tokens, so if you have multiple
# instances of storm-webdav serving for the same VOs, you should use
# the same secret
# IMPORTANT: set this in production, do not rely on the default random
# value as that will cause problems across service restarts
Environment="STORM_WEBDAV_AUTHZ_SERVER_SECRET=<%=scope.lookupvar('storm::webdav::authz_server_secret')%>"
<%- end -%>

# Should StoRM WebDAV always require a valid client certificate on the HTTPS endpoint?
# Set to 'false' if you want token-based authentication to work (and thus third-party copy)
Environment="STORM_WEBDAV_REQUIRE_CLIENT_CERT=<%=scope.lookupvar('storm::webdav::require_client_cert')%>"

# Use Conscrypt JSSE provider?
# Default: false
# Set to 'true' if you want to use a faster TLS implementation which can improve dramatically
# the performance on data transfers. This flag must also set to "true" when HTTP/2 is enabled
Environment="STORM_WEBDAV_USE_CONSCRYPT=<%=scope.lookupvar('storm::webdav::use_conscrypt')%>"

# Use Conscrypt JSSE provider for TPC client connections?
# Default: false
# Set to 'true' if you want to use a faster TLS implementation which can improve dramatically
# the performance on data transfers. This flag controls the use of Conscrypt for TPC client connections.
Environment="STORM_WEBDAV_TPC_USE_CONSCRYPT=<%=scope.lookupvar('storm::webdav::tpc_use_conscrypt')%>"

# Enable HTTP/2 support?
# Default: false
# Set to 'true' if you want to enable HTTP/2 (and remember to enable conscrypt too!)
Environment="STORM_WEBDAV_ENABLE_HTTP2=<%=scope.lookupvar('storm::webdav::enable_http2')%>"

# Source file for the tape REST API well-known endpoint
# Default: '/etc/storm/webdav/wlcg-tape-rest-api.json'
Environment="STORM_WEBDAV_TAPE_WELLKNOWN_SOURCE=<%=scope.lookupvar('storm::webdav::tape_wellknown_source')%>"

# Buffer size for both internal and third-party copy requests.
# This adds more efficiency than to write the whole data. Valid values are numbers greater/equals than 4096.
# Default: 1048576
Environment="STORM_WEBDAV_BUFFER_FILE_BUFFER_SIZE_BYTES=<%=scope.lookupvar('storm::webdav::file_buffer_size')%>"

# Enable checksum filter which adds checksum as an header following RFC 3230.
# Default: true
Environment="STORM_WEBDAV_CHECKSUM_FILTER_ENABLED=<%=scope.lookupvar('storm::webdav::checksum_filter_enabled')%>"

# Enable Macaroon filter to process Macaroon tokens. Requires authz server enabled.
# Default: true
Environment="STORM_WEBDAV_MACAROON_FILTER_ENABLED=<%=scope.lookupvar('storm::webdav::macaroon_filter_enabled')%>"

# TLS protocol for non-TPC requests
# Default: TLS
Environment="STORM_WEBDAV_TLS_PROTOCOL=<%=scope.lookupvar('storm::webdav::tls_protocol')%>"

# VOMS Trust Store directory
# Default: /etc/grid-security/vomsdir
Environment="STORM_WEBDAV_VOMS_TRUST_STORE_DIR=<%=scope.lookupvar('storm::webdav::voms_trust_store_dir')%>"

# VOMS Trust Store refresh interval
# Default: 43200
Environment="STORM_WEBDAV_VOMS_TRUST_STORE_REFRESH_INTERVAL_SEC=<%=scope.lookupvar('storm::webdav::voms_trust_store_refresh_interval_sec')%>"

# Enable caching for VOMS certificate validation
# Default: true
Environment="STORM_WEBDAV_VOMS_CACHE_ENABLE=<%=scope.lookupvar('storm::webdav::voms_cache_enabled')%>"

# Cache entries lifetime, used if caching for VOMS certificate validation is enabled
# Default: 300
Environment="STORM_WEBDAV_VOMS_CACHE_ENTRY_LIFETIME_SEC=<%=scope.lookupvar('storm::webdav::voms_cache_entry_lifetime_sec')%>"

# Enable SciTags support
# Default: false
Environment="STORM_WEBDAV_SCITAG_ENABLED=<%=scope.lookupvar('storm::webdav::scitag')%>"
